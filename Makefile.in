# @configure_input@

# Pacakge-specific substitution variables
package = @PACKAGE_NAME@
version = @PACKAGE_VERSION@
tarname = @PACKAGE_TARNAME@
distdir = $(tarname)-$(version)

# Prefix-specific substitution variables

prefix = @prefix@
exec_prefix = @exec_prefix@
bindir = @bindir@

# check if this exists in autotools
builddir = build

# VPATH-specific substitution variables
srcdir = @srcdir@
VPATH = @srcdir@

# Export build directories to subsequent makefiles
OBJDIR = obj
LIBDIR = lib
BINDIR = bin
export OBJDIR
export LIBDIR
export BINDIR

# Do a build in-place (project root dir is destination folder)
all: $(OBJDIR) $(LIBDIR) $(BINDIR)
	cd src && $(MAKE) all

$(OBJDIR):
	mkdir $(OBJDIR)

$(LIBDIR):
	mkdir $(LIBDIR)
	
$(BINDIR):
	mkdir $(BINDIR)

dist: $(distdir).tar.gz

# Make a build directory and do a remote build in-place there
build: config.status
	mkdir $(builddir)
	cd $(builddir) && ../configure && make all

# Generate a distributable .tar.gz
$(distdir).tar.gz: $(distdir)
	tar chof - $(distdir) | gzip -9 -c > $@
	rm -rf $(distdir)

# Build a distributable dummy folder from our source & autotools scripts
$(distdir): FORCE
	mkdir -p $(distdir)/src
	cp configure.ac $(distdir)
	cp configure $(distdir)
	cp Makefile.in $(distdir)
	cp -r $(srcdir) $(distdir)/src

# Force a clean-build of the distributable
FORCE:
	-rm $(distdir).tar.gz > /dev/null 2>&1
	-rm -rf $(distdir) >/dev/null 2>&1

# Make sure we use config.status to generate our makefile
Makefile: Makefile.in config.status
	./config.status $@

# Make sure our configure script exists & check config status
config.status: configure
	./config.status --recheck

clean:
	rm -rf $(OBJDIR) $(LIBDIR) $(BINDIR)

# Try to remove .tar.gz if it exists, ignore if it doesn't
distclean:
	-rm $(distdir).tar.gz

# Make sure our abstract targets are not actual files
.PHONY: FORCE all clean dist distclean build
